import copy

from utilities import *
from cpma import CPMA
from transition import Transition
import math


def min_exp_propagation_time(trees, time, time_particle):
    """

    :param time_particle:
    :param time: time indicator
    :param trees: trees generated by frequent congestion tree.

    :return: minimum expected propagation time to each road segment (*5min)
    """
    # initialization
    congestion_matrix_over_all = prep_congestion_matrix(time_particle)
    adj_matrix = prep_adj_matrix()
    trees_ = list(set(sum(trees, [])))

    expected_propagation_time = {i: [0] for i in trees_}
    expected_propagation_time_ = {}

    for tree in trees:
        tree_ = copy.deepcopy(tree)
        paths = unfold(tree_, adj_matrix=adj_matrix)
        print('from tree =', tree, '\n to paths =', paths)

        tran = Transition(congestion_matrix=congestion_matrix_over_all, num_days=5)
        for path in paths:
            tran.extract_history(path, time, time_particle)
            days_seq = tran.generate_seq()
            transition_matrix = tran.construct_transition_matrix(days_seq)
            tran.clear()

            cmpa = CPMA(transition_matrix)
            prob = cmpa.cal_propagation_prob()
            # print('propagation probability:\n', prob, '\n')
            expected_time = cmpa.cal_expected_propagation_time()
            # print('expected propagation time (*5min):\n', expected_time, '\n')
            for i in range(0, len(expected_time)):
                if not math.isnan(expected_time[i]):
                    expected_propagation_time[path[i + 1]].append(expected_time[i])
            print(expected_propagation_time)

    for k, v in expected_propagation_time.items():
        if sum(v) == 0:
            expected_propagation_time_[k] = 0.
        else:
            expected_propagation_time_[k] = min(filter(lambda x: x > 0, v))
    print('minimum expected propagation time to each road segment*', time_particle, 'min:\n', expected_propagation_time_)

    write_into_csv(expected_propagation_time_, time, time_particle)


if __name__ == '__main__':
    trees = [[39, 70, 73, 49, 64, 48], [39, 66, 70, 73, 64, 48], [39, 66, 49, 64, 48, 70]]
    print(trees)
    time = 1070
    time_particle = 1
    min_exp_propagation_time(trees, time, time_particle)
